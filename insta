<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel de Control y Ruteo</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Aviso de precarga para PapaParse -->
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/papaparse/5.3.0/papaparse.min.js" as="script">
    
    <!-- 
    Chosen Palette: Minimalist Neutrals (Warm Grays)
    Application Structure Plan: 
    Se ha rediseñado la app con una navegación principal por pestañas para separar dos flujos de trabajo distintos: (1) Análisis/Dashboard y (2) Planificación/Ruteo.
    1. Pestaña "Dashboard": Mantiene la estructura de dashboard de solo lectura (KPIs, Gráficos, Tabla) pero ahora sus datos se cargan dinámicamente desde Firestore usando un listener 'onSnapshot'.
    2. Pestaña "Planificador de Rutas": Implementa el flujo de trabajo de VRP solicitado por el usuario en 3 pasos claros:
       - Paso 1: Importar (Drag-and-Drop CSV) -> Limpia datos -> Sube a colección 'pedidos' de Firestore.
       - Paso 2: Generar Rutas -> UI para 'num_vehicles' y fecha -> Botón que (simula) la llamada a un backend/Cloud Function de VRP.
       - Paso 3: Resultados -> Dos columnas que escuchan 'onSnapshot' de Firestore para 'rutas' y 'pedidos no_asignados', mostrando los resultados en tiempo real.
    Esta estructura con pestañas es ideal porque separa la "lectura" de datos (Dashboard) de la "escritura/modificación" (Planificador), creando una experiencia de usuario lógica y sencilla.
    
    Visualization & Content Choices:
    - (Dashboard) Info: KPIs, Gráficos (Hora, Tienda, Pago, Modelo), Tabla de Pedidos.
      - Goal: Informar, explorar.
      - Viz/Method: Mismos que antes (Tarjetas, Gráficos Chart.js, Tabla HTML).
      - Interaction: Tooltips, Filtros de tabla.
      - Justification: Proporciona el resumen operativo. Ahora alimentado por Firestore.
    - (Planificador) Info: Importación de CSV.
      - Goal: Organizar, Cargar datos.
      - Viz/Method: Área de Drag-and-Drop, botón de carga, log de estado.
      - Interaction: Carga de archivo, clic de botón.
      - Justification: Implementa el requisito de importación de datos. Usa PapaParse para fiabilidad.
    - (Planificador) Info: Generador de Rutas (VRP).
      - Goal: Ejecutar lógica de negocio.
      - Viz/Method: Inputs de formulario (fecha, vehículos) y botón "Generar Rutas".
      - Interaction: Clic de botón.
      - Justification: Es el disparador (trigger) para el backend de VRP.
    - (Planificador) Info: Resultados de Ruteo (Rutas y No Asignados).
      - Goal: Informar (resultados de la acción).
      - Viz/Method: Listas dinámicas (tarjetas para rutas, lista para no asignados).
      - Interaction: Actualización en tiempo real (onSnapshot).
      - Justification: Cierra el ciclo de feedback del VRP, mostrando lo que el backend ha calculado.

    CONFIRMATION: NO SVG graphics used. NO Mermaid JS used.
    -->
    
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8f9fa; 
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 600px;
            height: 320px;
            max-height: 400px;
            margin-left: auto;
            margin-right: auto;
        }
        @media (min-width: 768px) {
            .chart-container {
                height: 360px;
            }
        }
        
        .table-container {
            width: 100%;
            overflow-x: auto;
            max-height: 600px;
            overflow-y: auto;
            border: 1px solid #e2e8f0;
            border-radius: 0.5rem;
        }
        
        thead th {
            position: sticky;
            top: 0;
            background-color: #f1f5f9;
            z-index: 10;
        }
        
        .tab-button {
            padding: 0.75rem 1.5rem;
            font-weight: 500;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            color: #6b7280;
        }
        
        .tab-button.active {
            color: #4f46e5;
            border-bottom-color: #4f46e5;
        }
        
        .drop-zone {
            border: 2px dashed #cbd5e1;
            border-radius: 0.5rem;
            padding: 2.5rem;
            text-align: center;
            color: #6b7280;
            transition: all 0.2s ease-in-out;
        }
        
        .drop-zone.drag-over {
            background-color: #eef2ff;
            border-color: #4f46e5;
        }
        
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #4f46e5;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="text-gray-800">

    <div class="container mx-auto p-4 md:p-8">
        
        <header class="mb-6">
            <h1 class="text-3xl font-bold text-gray-900">Plataforma de Ruteo y Análisis</h1>
            <p class="text-lg text-gray-600" id="report-date">Cargando datos...</p>
        </header>

        <!-- Navegación por Pestañas -->
        <nav class="border-b border-gray-300 mb-8">
            <div class="flex">
                <button id="tab-dashboard" class="tab-button active" onclick="showView('dashboard')">Dashboard</button>
                <button id="tab-routing" class="tab-button" onclick="showView('routing')">Planificador de Rutas</button>
            </div>
        </nav>

        <!-- Contenido Pestaña 1: Dashboard -->
        <div id="view-dashboard">
            <section id="kpis" class="mb-8">
                <h2 class="text-2xl font-semibold text-gray-800 mb-4">Resumen del Día</h2>
                <p class="text-gray-600 mb-4">
                    Esta sección proporciona una vista de alto nivel de las métricas operativas clave del día. Use estas tarjetas para entender rápidamente el volumen y la escala de los pedidos gestionados.
                </p>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                        <h3 class="text-sm font-medium text-gray-500 uppercase">Total de Pedidos</h3>
                        <p class="text-3xl font-bold text-indigo-600" id="kpi-total-jobs">0</p>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                        <h3 class="text-sm font-medium text-gray-500 uppercase">Tiendas Únicas</h3>
                        <p class="text-3xl font-bold text-indigo-600" id="kpi-total-stores">0</p>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                        <h3 class="text-sm font-medium text-gray-500 uppercase">Clientes Únicos</h3>
                        <p class="text-3xl font-bold text-indigo-600" id="kpi-total-clients">0</p>
                    </div>
                </div>
            </section>

            <section id="visualizations" class="mb-8">
                <h2 class="text-2xl font-semibold text-gray-800 mb-4">Visualizaciones de Distribución</h2>
                <p class="text-gray-600 mb-4">
                    Los siguientes gráficos desglosan la carga de trabajo del día. Analice estos gráficos para identificar horas pico, las tiendas con más volumen y las características predominantes de los pedidos.
                </p>
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                        <h3 class="text-lg font-semibold text-center mb-4">Pedidos por Hora (Slot)</h3>
                        <div class="chart-container">
                            <canvas id="jobsByHourChart"></canvas>
                        </div>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                        <h3 class="text-lg font-semibold text-center mb-4">Pedidos por Tienda</h3>
                        <div class="chart-container">
                            <canvas id="jobsByStoreChart"></canvas>
                        </div>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                        <h3 class="text-lg font-semibold text-center mb-4">Métodos de Pago</h3>
                        <div class="chart-container">
                            <canvas id="jobsByPaymentChart"></canvas>
                        </div>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                        <h3 class="text-lg font-semibold text-center mb-4">Modelos Operativos</h3>
                        <div class="chart-container">
                            <canvas id="jobsByModelChart"></canvas>
                        </div>
                    </div>
                </div>
            </section>

            <section id="data-explorer">
                <h2 class="text-2xl font-semibold text-gray-800 mb-4">Explorador de Pedidos</h2>
                <p class="text-gray-600 mb-4">
                    Utilice las herramientas de filtro a continuación para buscar pedidos específicos. Puede buscar por Job Number, Tienda o Cliente, o filtrar por un slot de tiempo específico para ver los detalles.
                </p>
                <div class="flex flex-col md:flex-row gap-4 mb-4 p-4 bg-white rounded-lg shadow-sm border border-gray-200">
                    <div class="flex-1">
                        <label for="search-input" class="block text-sm font-medium text-gray-700">Buscar</label>
                        <input type="text" id="search-input" placeholder="Buscar por Job Number, Tienda, Cliente..." class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>
                    <div class="flex-1">
                        <label for="slot-filter" class="block text-sm font-medium text-gray-700">Filtrar por Slot</label>
                        <select id="slot-filter" class="mt-1 block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            <option value="all">Todos los Slots</option>
                        </select>
                    </div>
                </div>
                <div class="table-container bg-white shadow-md">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-100">
                            <tr>
                                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Job Number</th>
                                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tienda</th>
                                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cliente</th>
                                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Slot Inicio</th>
                                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Slot Fin</th>
                                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Método Pago</th>
                                <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Destino (Lat, Lon)</th>
                            </tr>
                        </thead>
                        <tbody id="jobs-table-body" class="bg-white divide-y divide-gray-200">
                        </tbody>
                    </table>
                </div>
                <p id="no-results" class="text-center text-gray-500 py-8 hidden">No se encontraron resultados para los filtros aplicados.</p>
            </section>
        </div>

        <!-- Contenido Pestaña 2: Planificador de Rutas -->
        <div id="view-routing" class="hidden">
            
            <!-- Paso 1: Importar desde Google Sheet -->
            <section id="importer" class="mb-8">
                <h2 class="text-2xl font-semibold text-gray-800 mb-4">Paso 1: Sincronizar desde Google Sheet</h2>
                <p class="text-gray-600 mb-4">
                    Pega el enlace de tu Google Sheet publicado en la web (en formato CSV) para importar los pedidos a Firestore con estado "pendiente".
                </p>
                <div class="p-6 bg-white rounded-lg shadow-md border border-gray-200">
                    <label for="gheet-url-input" class="block text-sm font-medium text-gray-700">URL de Google Sheet (publicado como CSV)</label>
                    <div class="flex flex-col md:flex-row gap-2 mt-1">
                        <input type="text" id="gheet-url-input" value="https://docs.google.com/spreadsheets/d/e/2PACX-1vS17Lju7CnNJpzS7zb2l237sZMyC-GVj33iROvKqIVo8SB7mlmh7BwpOb2e9TDQn8n9Sl0FGtc02bIj/pub?output=csv" class="flex-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        <button id="sync-gheet-btn" class="px-5 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 disabled:opacity-50" disabled>
                            Cargando...
                        </button>
                    </div>
                </div>
                <div id="import-status" class="mt-4">
                    <h4 class="font-semibold">Log de Importación:</h4>
                    <pre id="import-log" class="text-sm bg-gray-100 p-3 rounded-md h-32 overflow-y-auto">Esperando archivo...</pre>
                </div>
            </section>

            <!-- Paso 2: Generar Rutas -->
            <section id="generator" class="mb-8">
                <h2 class="text-2xl font-semibold text-gray-800 mb-4">Paso 2: Generar Rutas</h2>
                <p class="text-gray-600 mb-4">
                    Una vez importados los pedidos, seleccione la fecha y el número de vehículos disponibles, luego ejecute el planificador.
                </p>
                <div class="p-6 bg-white rounded-lg shadow-md border border-gray-200 flex flex-col md:flex-row items-center gap-4">
                    <div>
                        <label for="vrp-date" class="block text-sm font-medium text-gray-700">Fecha de Ruta</label>
                        <input type="date" id="vrp-date" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>
                    <div>
                        <label for="vrp-vehicles" class="block text-sm font-medium text-gray-700">Nº de Vehículos</label>
                        <input type="number" id="vrp-vehicles" value="4" min="1" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>
                    <div class="mt-auto">
                        <button id="generate-routes-btn" class="flex items-center justify-center px-6 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700">
                            <span id="btn-text">Generar Rutas</span>
                            <div id="btn-loader" class="loader hidden ml-2"></div>
                        </button>
                    </div>
                </div>
            </section>

            <!-- Paso 3: Resultados -->
            <section id="results">
                <h2 class="text-2xl font-semibold text-gray-800 mb-4">Paso 3: Resultados del Ruteo</h2>
                <p class="text-gray-600 mb-4">
                    Los resultados del planificador aparecerán aquí en tiempo real a medida que el backend los procese.
                </p>
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                        <h3 class="text-lg font-semibold mb-4">Rutas Generadas</h3>
                        <div id="generated-routes-list" class="space-y-3 h-96 overflow-y-auto">
                            <p class="text-gray-500">Esperando resultados...</p>
                        </div>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
                        <h3 class="text-lg font-semibold mb-4">Pedidos No Asignados</h3>
                        <div id="unassigned-jobs-list" class="space-y-2 h-96 overflow-y-auto">
                           <p class="text-gray-500">Esperando resultados...</p>
                        </div>
                    </div>
                </div>
            </section>

        </div>
    </div>

    <!-- Cargar PapaParse ANTES que el script del módulo que lo usa -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/papaparse/5.3.0/papaparse.min.js"></script>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { 
            getAuth, 
            signInAnonymously, 
            signInWithCustomToken 
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { 
            getFirestore, 
            doc, 
            collection, 
            addDoc, 
            writeBatch,
            query,
            where,
            onSnapshot,
            GeoPoint,
            Timestamp,
            setLogLevel
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        let db, auth;
        let processedJobs = [];
        let charts = {};
        const chartColors = {
            blue: 'rgba(59, 130, 246, 0.7)', indigo: 'rgba(79, 70, 229, 0.7)',
            green: 'rgba(16, 185, 129, 0.7)', pink: 'rgba(236, 72, 153, 0.7)',
            yellow: 'rgba(245, 158, 11, 0.7)', purple: 'rgba(139, 92, 246, 0.7)',
            teal: 'rgba(20, 184, 166, 0.7)', red: 'rgba(239, 68, 68, 0.7)',
        };

        window.showView = (viewId) => {
            document.getElementById('view-dashboard').classList.toggle('hidden', viewId !== 'dashboard');
            document.getElementById('view-routing').classList.toggle('hidden', viewId !== 'routing');
            
            document.getElementById('tab-dashboard').classList.toggle('active', viewId === 'dashboard');
            document.getElementById('tab-routing').classList.toggle('active', viewId === 'routing');
        };

        document.addEventListener('DOMContentLoaded', async () => {
            try {
                const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
                const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

                if (!firebaseConfig.apiKey) {
                    console.error("Firebase config is missing.");
                    logToImportStatus("Error: Configuración de Firebase no encontrada.", true);
                    return;
                }

                const app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
                setLogLevel('Debug');

                if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                    await signInWithCustomToken(auth, __initial_auth_token);
                } else {
                    await signInAnonymously(auth);
                }
                
                logToImportStatus(`Firebase conectado. UID: ${auth.currentUser.uid.substring(0, 10)}...`);

                setupDashboardListeners();
                setupRoutingListeners();
                listenToDashboardData();
                listenToRoutingResults();
                initializeImporter();

                document.getElementById('vrp-date').valueAsDate = new Date();

            } catch (error) {
                console.error("Error inicializando Firebase:", error);
                logToImportStatus(`Error de inicialización: ${error.message}`, true);
            }
        });
        
        function initializeImporter() {
            if (typeof Papa !== 'undefined') {
                const syncButton = document.getElementById('sync-gheet-btn');
                
                syncButton.disabled = false;
                syncButton.textContent = 'Sincronizar Pedidos';
                
                logToImportStatus("Librería de análisis cargada. Listo para importar.", false);
            } else {
                logToImportStatus("Cargando librería de análisis...", false);
                setTimeout(initializeImporter, 200);
            }
        }
        
        function setupDashboardListeners() {
            const searchInput = document.getElementById('search-input');
            const slotFilter = document.getElementById('slot-filter');
            
            const handleFilter = () => {
                const searchTerm = searchInput.value.toLowerCase();
                const selectedSlot = slotFilter.value;

                const filteredJobs = processedJobs.filter(job => {
                    const matchesSearch = 
                        (job.Job_Number && job.Job_Number.toLowerCase().includes(searchTerm)) ||
                        (job.Tienda && job.Tienda.toLowerCase().includes(searchTerm)) ||
                        (job.Cliente_ID && job.Cliente_ID.toLowerCase().includes(searchTerm));
                    
                    const matchesSlot = 
                        selectedSlot === 'all' || 
                        job.Slot_Hour === selectedSlot;

                    return matchesSearch && matchesSlot;
                });
                
                renderTable(filteredJobs);
            };

            searchInput.addEventListener('keyup', handleFilter);
            slotFilter.addEventListener('change', handleFilter);
        }

        function listenToDashboardData() {
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            const userId = auth.currentUser?.uid || 'anonymous';
            const q = query(collection(db, `artifacts/${appId}/users/${userId}/pedidos`));

            onSnapshot(q, (snapshot) => {
                processedJobs = [];
                snapshot.forEach((doc) => {
                    const data = doc.data();
                    processedJobs.push({
                        ...data,
                        Slot_Inicio: data.slot_Inicio?.toDate(),
                        Slot_Fin: data.slot_Fin?.toDate()
                    });
                });
                
                processDashboardData();
                renderKPIs();
                renderCharts();
                populateSlotFilter();
                renderTable(processedJobs);
                
            }, (error) => {
                console.error("Error escuchando pedidos: ", error);
            });
        }
        
        function processDashboardData() {
            processedJobs = processedJobs.map(job => ({
                ...job,
                Slot_Hour: formatHour(job.Slot_Inicio),
                Slot_Start_Time: formatDateTime(job.Slot_Inicio),
                Slot_End_Time: formatDateTime(job.Slot_Fin)
            }));
        }

        function cleanCoordinate(coord) {
            if (typeof coord !== 'string') return null;
            return parseFloat(coord.replace(',', '.'));
        }

        function formatHour(date) {
            if (!date || typeof date.getHours !== 'function') return 'N/A';
            const hour = date.getHours().toString().padStart(2, '0');
            return `${hour}:00`;
        }
        
        function formatDateTime(date) {
             if (!date || typeof date.toLocaleTimeString !== 'function') return 'N/A';
             return date.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' });
        }

        function renderKPIs() {
            const totalJobs = processedJobs.length;
            const uniqueStores = new Set(processedJobs.map(j => j.Tienda)).size;
            const uniqueClients = new Set(processedJobs.map(j => j.Cliente_ID)).size;

            const kpiJobsEl = document.getElementById('kpi-total-jobs');
            const kpiStoresEl = document.getElementById('kpi-total-stores');
            const kpiClientsEl = document.getElementById('kpi-total-clients');
            const reportDateEl = document.getElementById('report-date');

            if (kpiJobsEl) kpiJobsEl.textContent = totalJobs;
            if (kpiStoresEl) kpiStoresEl.textContent = uniqueStores;
            if (kpiClientsEl) kpiClientsEl.textContent = uniqueClients;
            
            if (reportDateEl) {
                if (processedJobs.length > 0) {
                     const date = new Date(processedJobs[0].Fecha_Formalizada?.toDate() || processedJobs[0].Fecha_Creacion?.toDate() || Date.now());
                     reportDateEl.textContent = `Análisis de datos para: ${date.toLocaleDateString('es-ES', { day: '2-digit', month: 'long', year: 'numeric' })}`;
                } else {
                     reportDateEl.textContent = `Análisis de datos`;
                }
            }
        }

        function aggregateData(key) {
            return processedJobs.reduce((acc, job) => {
                const value = job[key] || 'N/A';
                acc[value] = (acc[value] || 0) + 1;
                return acc;
            }, {});
        }

        function renderCharts() {
            const colorValues = Object.values(chartColors);
            
            Object.values(charts).forEach(chart => chart.destroy());

            if (processedJobs.length === 0) return;

            const jobsByHourData = aggregateData('Slot_Hour');
            const sortedHours = Object.keys(jobsByHourData).sort();
            charts.jobsByHour = new Chart(document.getElementById('jobsByHourChart'), {
                type: 'bar',
                data: {
                    labels: sortedHours,
                    datasets: [{ label: 'Nº de Pedidos', data: sortedHours.map(h => jobsByHourData[h]), backgroundColor: chartColors.blue }]
                },
                options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true } } }
            });

            const jobsByStoreData = aggregateData('Tienda');
            charts.jobsByStore = new Chart(document.getElementById('jobsByStoreChart'), {
                type: 'doughnut',
                data: {
                    labels: Object.keys(jobsByStoreData),
                    datasets: [{ data: Object.values(jobsByStoreData), backgroundColor: colorValues }]
                },
                options: { responsive: true, maintainAspectRatio: false }
            });

            const jobsByPaymentData = aggregateData('Metodo_Pago');
            charts.jobsByPayment = new Chart(document.getElementById('jobsByPaymentChart'), {
                type: 'pie',
                data: {
                    labels: Object.keys(jobsByPaymentData),
                    datasets: [{ data: Object.values(jobsByPaymentData), backgroundColor: [chartColors.green, chartColors.indigo, chartColors.yellow, chartColors.pink] }]
                },
                options: { responsive: true, maintainAspectRatio: false }
            });
            
            const jobsByModelData = aggregateData('Modelo_Operativo');
            charts.jobsByModel = new Chart(document.getElementById('jobsByModelChart'), {
                type: 'bar',
                data: {
                    labels: Object.keys(jobsByModelData).map(l => l.length > 25 ? l.substring(0, 25) + '...' : l),
                    datasets: [{ label: 'Nº de Pedidos', data: Object.values(jobsByModelData), backgroundColor: chartColors.purple }]
                },
                options: { indexAxis: 'y', responsive: true, maintainAspectRatio: false, scales: { x: { beginAtZero: true } } }
            });
        }
        
        function populateSlotFilter() {
            const slotFilter = document.getElementById('slot-filter');
            const currentVal = slotFilter.value;
            slotFilter.innerHTML = '<option value="all">Todos los Slots</option>';
            const slots = [...new Set(processedJobs.map(j => j.Slot_Hour))].sort();
            slots.forEach(slot => {
                if(slot === 'N/A') return;
                const option = document.createElement('option');
                option.value = slot;
                option.textContent = slot;
                slotFilter.appendChild(option);
            });
            slotFilter.value = currentVal;
        }

        function renderTable(jobs) {
            const tableBody = document.getElementById('jobs-table-body');
            const noResults = document.getElementById('no-results');
            tableBody.innerHTML = '';
            
            if (jobs.length === 0) {
                noResults.classList.remove('hidden');
                return;
            }
            
            noResults.classList.add('hidden');
            jobs.forEach(job => {
                const tr = document.createElement('tr');
                tr.className = 'hover:bg-gray-50';
                tr.innerHTML = `
                    <td class="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">${job.Job_Number || 'N/A'}</td>
                    <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-600">${job.Tienda || 'N/A'}</td>
                    <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-600">${job.Cliente_ID || 'N/A'}</td>
                    <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-600">${job.Slot_Start_Time || 'N/A'}</td>
                    <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-600">${job.Slot_End_Time || 'N/A'}</td>
                    <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-600">${job.Metodo_Pago || 'N/A'}</td>
                    <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-600">${job.Destino_Lat || 'N/A'}, ${job.Destino_Lon || 'N/A'}</td>
                `;
                tableBody.appendChild(tr);
            });
        }
        
        function logToImportStatus(message, isError = false) {
            const logEl = document.getElementById('import-log');
            logEl.textContent = message;
            logEl.style.color = isError ? '#ef4444' : '#10b981';
        }

        function setupRoutingListeners() {
            const genButton = document.getElementById('generate-routes-btn');
            const syncButton = document.getElementById('sync-gheet-btn');
            
            syncButton.addEventListener('click', syncFromGoogleSheet);
            genButton.addEventListener('click', triggerVRPBackend);
        }
        
        async function syncFromGoogleSheet() {
            const urlInput = document.getElementById('gheet-url-input');
            const url = urlInput.value;
            
            if (!url || !url.startsWith('https://docs.google.com/spreadsheets/')) {
                logToImportStatus("Error: Por favor, ingrese una URL válida de Google Sheet publicada como CSV.", true);
                return;
            }
            
            logToImportStatus(`Descargando datos desde Google Sheet...`);
            
            try {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error(`Error al descargar: ${response.statusText}`);
                }
                
                const csvText = await response.text();
                
                logToImportStatus(`Datos descargados. Procesando ${csvText.length} bytes...`);
                
                Papa.parse(csvText, {
                    header: true,
                    skipEmptyLines: true,
                    complete: (results) => {
                        cleanAndUploadJobs(results.data);
                    },
                    error: (error) => {
                        logToImportStatus(`Error al parsear CSV: ${error.message}`, true);
                    }
                });
                
            } catch (error) {
                logToImportStatus(`Error de red: ${error.message}`, true);
            }
        }

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        async function cleanAndUploadJobs(jobs) {
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            const userId = auth.currentUser?.uid || 'anonymous';
            const collectionPath = `artifacts/${appId}/users/${userId}/pedidos`;
            const batch = writeBatch(db);
            let processedCount = 0;

            logToImportStatus(`Limpiando y preparando ${jobs.length} pedidos...`);

            try {
                for (const job of jobs) {
                    if (!job.Job_Number || !job.Slot_Inicio || !job.Destino_Latitud) {
                        continue;
                    }
                    
                    const lat = cleanCoordinate(job.Destino_Latitud);
                    const lon = cleanCoordinate(job.Destino_Longitud);
                    const origenLat = cleanCoordinate(job.Origen_Latitud);
                    const origenLon = cleanCoordinate(job.Origen_Longitud);

                    if (isNaN(lat) || isNaN(lon) || isNaN(origenLat) || isNaN(origenLon)) {
                        console.warn("Saltando fila por coordenadas inválidas:", job.Job_Number);
                        continue;
                    }

                    const docRef = doc(collection(db, collectionPath));
                    batch.set(docRef, {
                        job_Number: job.Job_Number,
                        status: "CREATED",
                        cliente_ID: job.Cliente_ID || null,
                        tienda: job.Tienda,
                        fecha_Creacion: Timestamp.fromDate(new Date(job.Fecha_Creacion)),
                        slot_Inicio: Timestamp.fromDate(new Date(job.Slot_Inicio)),
                        slot_Fin: Timestamp.fromDate(new Date(job.Slot_Fin)),
                        metodo_Pago: job.Metodo_Pago || null,
                        modelo_Operativo: job.Modelo_Operativo || null,
                        origen: new GeoPoint(origenLat, origenLon),
                        destino: new GeoPoint(lat, lon),
                        estado: "pendiente",
                        id_Ruta_Asignada: null,
                    });
                    processedCount++;
                }
                
                await batch.commit();
                logToImportStatus(`Éxito: Se subieron ${processedCount} pedidos a Firestore.`, false);

            } catch (error) {
                console.error("Error al subir a Firestore:", error);
                logToImportStatus(`Error al subir: ${error.message}`, true);
            }
        }
        
        async function triggerVRPBackend() {
            const genButton = document.getElementById('generate-routes-btn');
            const btnText = document.getElementById('btn-text');
            const btnLoader = document.getElementById('btn-loader');
            
            genButton.disabled = true;
            btnText.textContent = 'Generando...';
            btnLoader.classList.remove('hidden');

            const fecha = document.getElementById('vrp-date').value;
            const numVehicles = document.getElementById('vrp-vehicles').value;

            logToImportStatus(`Iniciando generación de rutas para ${fecha} con ${numVehicles} vehículos...`, false);
            
            try {
                const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
                const userId = auth.currentUser?.uid || 'anonymous';

                const payload = {
                    fecha: fecha,
                    num_vehicles: parseInt(numVehicles, 10),
                    appId: appId,
                    userId: userId
                };

                logToImportStatus("Llamando al backend de VRP...", false);
                
                await new Promise(resolve => setTimeout(resolve, 3000));
                
                logToImportStatus("Simulación de backend finalizada. Escuchando resultados...", false);

            } catch (error) {
                console.error("Error al disparar el backend:", error);
                logToImportStatus(`Error: ${error.message}`, true);
            } finally {
                genButton.disabled = false;
                btnText.textContent = 'Generar Rutas';
                btnLoader.classList.add('hidden');
            }
        }
        
        function listenToRoutingResults() {
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            const userId = auth.currentUser?.uid || 'anonymous';
            
            const routesQuery = query(collection(db, `artifacts/${appId}/public/data/rutas`));
            onSnapshot(routesQuery, (snapshot) => {
                const listEl = document.getElementById('generated-routes-list');
                listEl.innerHTML = '';
                if (snapshot.empty) {
                    listEl.innerHTML = '<p class="text-gray-500">Aún no se han generado rutas.</p>';
                    return;
                }
                snapshot.forEach(doc => {
                    const ruta = doc.data();
                    const card = document.createElement('div');
                    card.className = 'p-3 border rounded-md bg-gray-50';
                    card.innerHTML = `
                        <h4 class="font-semibold text-indigo-700">${ruta.vehiculo_ID || 'Ruta'} (ID: ${doc.id.substring(0,6)})</h4>
                        <p class="text-sm text-gray-600">Pedidos: ${ruta.pedidos_Asignados?.join(', ') || 'N/A'}</p>
                        <p class="text-sm text-gray-500">Estado: ${ruta.estado_Ruta || 'planificada'}</p>
                    `;
                    listEl.appendChild(card);
                });
            });
            
            const unassignedQuery = query(collection(db, `artifacts/${appId}/users/${userId}/pedidos`), where("estado", "==", "no_asignado"));
            onSnapshot(unassignedQuery, (snapshot) => {
                const listEl = document.getElementById('unassigned-jobs-list');
                listEl.innerHTML = '';
                if (snapshot.empty) {
                    listEl.innerHTML = '<p class="text-gray-500">No hay pedidos no asignados.</p>';
                    return;
                }
                snapshot.forEach(doc => {
                    const pedido = doc.data();
                    const item = document.createElement('div');
                    item.className = 'p-2 border-b';
                    item.innerHTML = `
                        <p class="font-medium text-red-600">${pedido.job_Number}</p>
                        <p class="text-sm text-gray-500">Tienda: ${pedido.tienda} / Slot: ${formatDateTime(pedido.slot_Inicio?.toDate())}</p>
                    `;
                    listEl.appendChild(item);
                });
            });
        }

    </script>
</body>
</html>












